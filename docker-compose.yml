version: '3'
services:
  api-gateway:
    container_name: api-gateway
    image: api-gateway:latest
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - employee-service
      - attendance-service
    networks:
      - backend
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: passwordForMySQL8.1
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - backend
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password_mongodb_123

  attendance-service:
    container_name: attendance-service
    image: attendance-service:latest
    build:
      context: ./attendance-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: development
      SERVER_PORT: 8082
    depends_on:
      - kafka
      - mongo
    networks:
      - backend

  employee-service:
    container_name: employee-service
    image: employee-service:latest
    build:
      context: ./employee-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: development
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - backend


  admin-dashboard:
    container_name: admin-dashboard
    image: admin-dashboard:latest
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: development
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - backend


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - backend

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
    mongo_data: